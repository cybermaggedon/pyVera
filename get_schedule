#!/usr/bin/env python

import urllib, urllib2, json
import sys
import vera
import csv

if len(sys.argv) != 3:
    sys.stderr.write("Usage:\n    get_schedule <config> <room>\n")
    sys.exit(1)

config = json.loads(open(sys.argv[1], "r").read())

if config.has_key("local"):
    ve = vera.VeraLocal(config["local"]["address"])
else:
    user = config["remote"]["user"]
    password = config["remote"]["password"]
    device = config["remote"]["device"]
    ve = vera.VeraRemote(user, password, device)

#print json.dumps(ve.get_user_data()["scenes"], indent=4)

#sys.exit(0)

room = ve.get_room(sys.argv[2])

scenes = ve.get_scenes()

output = csv.writer(sys.stdout)

for s in scenes:

    if s.room != room:
        continue

#    print json.dumps(s.definition.output(), indent=4)
#    print

    defn = s.definition

    name = defn.name
    days = defn.timers[0].days

    if len(defn.actions) != 1:
        raise RuntimeError, "Can only handle scene on single device"

    if len(defn.actions[0].actions) != 1:
        raise RuntimeError, "Can only handle single device in a group"

    device = defn.actions[0].actions[0].device

    value = defn.actions[0].actions[0].value

    if type(defn.actions[0].actions[0]) == vera.HeatingAction:
        tp = "heat"
    elif type(defn.actions[0].actions[0]) == vera.SwitchAction:
        tp = "switch"
    if type(defn.actions[0].actions[0]) == vera.SetpointAction:
        tp = "set"

    row = [name, days, device.name, tp, value]

    times = []
    for t in defn.timers:
        if t.days != days:
            raise RuntimeError, "Inconsistent days in scene"
        
        row.append(t.time.output())

    output.writerow(row)

sys.exit(0)

if status.has_key("scenes"):

    for i in status["scenes"]:

        scene = vera.get_scene(i["id"])

        print scene

        # These happen for deleted scenes?!  Why are they in the list?
        if scene == None: continue
        if not isinstance(scene, dict): continue

        if not scene.has_key("room"): continue
        if int(scene["room"]) != room_id: continue

#        continue

        name = scene["name"]
        days = scene["timers"][0]["days_of_week"]
        time = scene["timers"][0]["time"]
        device = scene["groups"][0]["actions"][0]["device"]
        value = scene["groups"][0]["actions"][0]["arguments"][0]["value"]

        output.writerow([name, days, time, device, value])


